buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'au.com.dius.pact.provider:gradle:4.1.7'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'au.com.dius.pact' version '4.1.6'
}

group = 'au.com.dius.pactworkshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
	testImplementation 'au.com.dius.pact.consumer:java8:4.1.7'
	testImplementation 'au.com.dius.pact.consumer:junit5:4.1.7'
}

test {
	useJUnitPlatform()
}

bootRun{
	standardInput = System.in
}

task copyPacts(type: Copy) {
	description 'Copies the generated Pact json file to the provider resources directory'

	from('build/pacts/')
	into('../provider/src/test/resources/pacts/')
}

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def getGitBranch = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

pact {
	publish {
		pactDirectory = 'consumer/build/pacts'
		pactBrokerUrl = 'http://localhost:8000/'
		pactBrokerUsername = 'pact_workshop'
		pactBrokerPassword = 'pact_workshop'
		tags = [getGitBranch(), 'test', 'prod']
		consumerVersion = getGitHash()
	}
}
